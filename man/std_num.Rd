% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-export.R
\name{std_num}
\alias{std_num}
\title{Convert and Standardize Numeric Values in Various Forms}
\usage{
std_num(x, na = na_patterns, std_chr = TRUE, warn = TRUE, ...)
}
\arguments{
\item{x}{A vector to convert to numeric}

\item{na}{Regex patterns to consider \code{NA}. Passed to \code{stringr::str_detect()}.
Can be a vector of patterns.}

\item{std_chr}{Whether to standardize a \code{character} or \code{factor} before conversion}

\item{warn}{Whether to warn when strings cannot be converted; passed to \code{chr_to_num()}}

\item{...}{
  Arguments passed on to \code{\link[=chr_to_num]{chr_to_num}}
  \describe{
    \item{\code{std}}{Whether to standardize the vector before cleaning and converting}
    \item{\code{convert}}{Whether to actually convert to \code{numeric}}
    \item{\code{replace}}{A \code{data.frame} of regular expressions and strings to replace
them; regular expression should be in a column named \code{pattern}, and
replacements should be in a column named \code{replacement}. Each row is passed
to \code{stringr::str_replace()}.}
    \item{\code{per_action}}{How to treat \%/percent/per million/etc labels. \code{drop} simply
removes the labels, \code{divide} divides the value by the appropriate denominator,
and \code{ignore} does nothing.}
    \item{\code{multiple_decimals}}{How to handle multiple decimals within a number}
    \item{\code{donor_host}}{Which value to use when values for both a donor and a host
are given}
  }}
}
\value{
A \code{numeric} vector
}
\description{
\code{std_num()} converts all base classes, as well as \code{int64}, \code{factor}, \code{Date},
and \code{POSIXt} vectors to the simplest numeric form possible.
}
\details{
\code{character} vectors are standardized using \code{std_chr()} by default, then
converted. \code{factor}s are treated as \code{character} vectors, rather than using
the underlying integer representation. \code{double} and \code{int64} vectors will be
converted to \code{integer} if this does not cause overflow or loss of precision.
\code{Date} is converted to \code{integer}, and \code{POSIXt} is converted to \code{integer} if
the range allows, otherwise \code{double}.
}
