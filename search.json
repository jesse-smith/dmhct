[{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jesse-smith.github.io/dmhct/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://jesse-smith.github.io/dmhct/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jesse Smith. Author, maintainer.","code":""},{"path":"https://jesse-smith.github.io/dmhct/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith J (2023). dmhct: Data Model Package MLinHCT Project. https://github.com/jesse-smith/dmhct, https://jesse-smith.github.io/dmhct/.","code":"@Manual{,   title = {dmhct: A Data Model Package for the MLinHCT Project},   author = {Jesse Smith},   year = {2023},   note = {https://github.com/jesse-smith/dmhct, https://jesse-smith.github.io/dmhct/}, }"},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"dmhct","dir":"","previous_headings":"","what":"A Data Model Package for the MLinHCT Project","title":"A Data Model Package for the MLinHCT Project","text":"dmhct extracts prepares data MLinHCT project. main functionality wrapped single function, dm_hct(), produces dm object ({dm} package) containing cleaned data tables SQL Server database.","code":""},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"installation-and-setup","dir":"","previous_headings":"","what":"Installation and Setup","title":"A Data Model Package for the MLinHCT Project","text":"can install dmhct Github : use package, need access SQL Server instance containing data. provided St. Jude ; contact Jesse Smith learn gain access.","code":"# install.packages(\"remotes\") remotes::install_github(\"jesse-smith/dmhct\")"},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"A Data Model Package for the MLinHCT Project","text":"dmhct designed get data SQL server database local machine standardized fashion. noted , main entry point functionality dm_hct() function, may ever need use. wraps entire pipeline single call: pipeline can decompsed 4 steps, responsible set tasks: dm_extract() pulls database SQL server onto local machine dm_standardize() ensures column names, types, contents consistent standard format dm_combine() combines certain sets tables single tables dm_pivot() pivots long-format datasets can widened without losing information Running functions order produce results running dm_hct():","code":"library(dmhct) dm <- dm_hct() #> Creating remote `dm` object #> Extracting database tables (1/4) #> Extracting `adverse_events_v2` #> Extracting `adverse_events_v3` #> Extracting `adverse_events_v4_1` #> Extracting `adverse_events_v4_2` #> Extracting `cerner_obs` #> Extracting `cerner1` #> Extracting `cerner2` #> Extracting `cerner3` #> Extracting `chimerism` #> Extracting `death` #> Extracting `disease_status` #> Extracting `encounters` #> Extracting `engraftment` #> Extracting `gvhd` #> Extracting `hla_donor` #> Extracting `hla_patient` #> Extracting `master` #> Extracting `mrd` #> Extracting `prior_transplant` #> Extracting `relapse` #> Done. #> Standardizing table columns (2/4) #> Standardizing `adverse_events_v2` #> Standardizing `adverse_events_v3` #> Standardizing `adverse_events_v4_1` #> Standardizing `adverse_events_v4_2` #> Standardizing `cerner_obs` #> Standardizing `cerner1` #> Standardizing `cerner2` #> Standardizing `cerner3` #> Standardizing `chimerism` #> Standardizing `death` #> Standardizing `disease_status` #> Standardizing `encounters` #> Standardizing `engraftment` #> Standardizing `gvhd` #> Standardizing `hla_donor` #> Standardizing `hla_patient` #> Standardizing `master` #> Standardizing `mrd` #> Standardizing `prior_transplant` #> Standardizing `relapse` #> Combining similar tables (3/4) #> Combining `cerner1`, `cerner2`, `cerner3` #> Combining hla_donor, hla_patient #> Done. #> Pivoting E-A-V tables (4/4) #> Pivoting `hla` #> Done. dm #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `adverse_events_v2`, `adverse_events_v3`, `adverse_events_v4_1`, `adverse_events_v4_2`, `cerner`, … (17 total) #> Columns: 332 #> Primary keys: 0 #> Foreign keys: 0 dm2 <- dm_extract() %>%   dm_standardize() %>%   dm_combine() %>%   dm_pivot() #> Creating remote `dm` object #> Extracting `adverse_events_v2` #> Extracting `adverse_events_v3` #> Extracting `adverse_events_v4_1` #> Extracting `adverse_events_v4_2` #> Extracting `cerner_obs` #> Extracting `cerner1` #> Extracting `cerner2` #> Extracting `cerner3` #> Extracting `chimerism` #> Extracting `death` #> Extracting `disease_status` #> Extracting `encounters` #> Extracting `engraftment` #> Extracting `gvhd` #> Extracting `hla_donor` #> Extracting `hla_patient` #> Extracting `master` #> Extracting `mrd` #> Extracting `prior_transplant` #> Extracting `relapse` #> Standardizing `adverse_events_v2` #> Standardizing `adverse_events_v3` #> Standardizing `adverse_events_v4_1` #> Standardizing `adverse_events_v4_2` #> Standardizing `cerner_obs` #> Standardizing `cerner1` #> Standardizing `cerner2` #> Standardizing `cerner3` #> Standardizing `chimerism` #> Standardizing `death` #> Standardizing `disease_status` #> Standardizing `encounters` #> Standardizing `engraftment` #> Standardizing `gvhd` #> Standardizing `hla_donor` #> Standardizing `hla_patient` #> Standardizing `master` #> Standardizing `mrd` #> Standardizing `prior_transplant` #> Standardizing `relapse` #> Combining `cerner1`, `cerner2`, `cerner3` #> Combining hla_donor, hla_patient #> Pivoting `hla`  identical(dm, dm2) #> [1] FALSE"},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"changes-from-previous-versions","dir":"","previous_headings":"","what":"Changes from previous versions","title":"A Data Model Package for the MLinHCT Project","text":"previous iteration package used dm_elt() function wrapper attempted thoroughly clean datasets. Unfortunately, requires many ad hoc decisions, hard-coded transformations, frequent revisions; resulting codebase difficult maintain frequently made decisions better left user. updated version package attempts much less; goal provide database standardized format, information original data preserved. passes task interpreting data user. Note dm_elt() components still exported; dm_extract(.legacy = TRUE) dm_transform() components pipeline. However, functions (.legacy argument dm_extract()) deprecated, use discouraged.","code":""},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"variable-typing-system","dir":"","previous_headings":"","what":"Variable Typing System","title":"A Data Model Package for the MLinHCT Project","text":"Variables names snakecased, prefix describing content variable. mostly maps familiar R classes: num_ pct_ variables numeric (pct_ taking values 0 100), lgl_ variables logical, chr_ variables character. exceptions, though; come two forms. first variable prefixes map R type, underlying data may need additional cleaning. currently true cat_ variable, conceptually factors stored character, dt_ variables, may stored either Date POSIXct class, depending whether time information included. second form exception variables equivalent base R type; currently true mcat_ variables, represent categorical variables can take multiple values simultaneously, intvl_ variables, interval-valued numerics. stored character, mcat_ values separated comma intvl_ represented standard interval notation.","code":""},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"helper-functions","dir":"","previous_headings":"","what":"Helper Functions","title":"A Data Model Package for the MLinHCT Project","text":"dmhct exports several sets helper functions. used internally make data extraction cleaning bit easier. functions listed ; see function’s documentation information.","code":""},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"data-cleaning","dir":"","previous_headings":"Helper Functions","what":"Data cleaning","title":"A Data Model Package for the MLinHCT Project","text":"intvl_to_matrix(): Converts interval representation intvl_ variables 4-column numeric matrix (variables standardized std_intvl() - see ). Columns represent open closed bounds location bounds. non_numeric(): Helps quickly determine values vector converted numeric (either directly std_num() - see ). std_chr(): Standardizes character vectors ASCII text unnecessary whitespace given case. default, retain newlines inside text, though condense consecutive newlines carriage returns single newline. std_date(): Standardizes date vector returns vector Date POSIXct format, depending whether sub-daily information available data. std_intvl(): standardizes various interval representations found ML HCT dataset. intervals assumed percentage values lie 0 100. Explicit intervals upper lower bounds, well implicit intervals using < >, handled (<= >= currently supported). return value simplifies <\/>/<=/>= single numeric value possible uses standard interval notation . std_lgl(): Converts classes logical vectors. character use .logical(); character (factor) vectors converted first (optionally) standardizing std_chr() assigning logical value based regular expression true, false, na. std_num(): Converts base classes, well int64, factor, Date, POSIXt vectors simplest numeric form possible. character vectors (factors) standardized using std_chr() default, converted. double int64 vectors converted integer cause overflow loss precision. Date converted integer, POSIXt converted integer range allows, otherwise double.","code":""},{"path":"https://jesse-smith.github.io/dmhct/index.html","id":"database-interaction","dir":"","previous_headings":"Helper Functions","what":"Database Interaction","title":"A Data Model Package for the MLinHCT Project","text":"con_sql_server(): Creates ODBC connection SQL server storing MLinHCT data dm_sql_server(): Creates dm object representing data SQL server dm_disconnect(): Closes remote server connection used dm object, present dm_is_remote(): Determines whether dm object remote connection dm_compute(): Forces computation database queries tables dm object dm_collect(): Computes database queries (dm_compute()), additionally loads tables onto local machine","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/DMCache.html","id":null,"dir":"Reference","previous_headings":"","what":"dm Cache Functions — DMCache","title":"dm Cache Functions — DMCache","text":"Functions reading, writing, checking/checksumming caches dm objects","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/DMCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dm Cache Functions — DMCache","text":"","code":"DMCache"},{"path":"https://jesse-smith.github.io/dmhct/reference/DMCache.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dm Cache Functions — DMCache","text":"object class DMCache (inherits R6) length 7.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/DMCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dm Cache Functions — DMCache","text":"obj [chr(1)] read cache fail [lgl(1)] Whether error dir/obj_file combo exist checksum [chr(1)] hash dm object file [chr(1)] file stem use cache objects dir [chr(1)] directory save cache objects n_threads int(1) number threads use de-serializing cached checksum dm [dm] dm object hash","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/DMCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dm Cache Functions — DMCache","text":"[dm] dm object (invisibly) Read dm Data Checksum Specified Cache [dm|chr(1)] de-serialized object Check Hash dm Object [lgl(1)] Whether passed checksum cached checksum identical Hash dm Object dm_checksum() creates checksum hashing table + name individually, sorting name, hashing list results. means hash change ordering tables change dm, change data names added, deleted, modified. [chr(1)] hash string object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/UtilsDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Conversion Utilities — UtilsDate","title":"Date Conversion Utilities — UtilsDate","text":"Contains utilities standardizing dates datetimes","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/UtilsDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Conversion Utilities — UtilsDate","text":"","code":"UtilsDate"},{"path":"https://jesse-smith.github.io/dmhct/reference/UtilsDate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Date Conversion Utilities — UtilsDate","text":"object class UtilsDate (inherits R6) length 3.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/UtilsDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date Conversion Utilities — UtilsDate","text":"force Whether force conversion Date (force = \"dt\") POSIXct (force = \"dttm\"). default forcing (force = \"none\"). tz_heuristic Hours consider determining presence sub-daily information. exact hours (.e. 5:00:00) combined. default corresponds accidental encoding CST-UTC offset hours. x vector character dates tz Optional timezone orders orders use parsing character vector parse_date_time() ... Additional arguments pass parse_date_time()","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/UtilsDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date Conversion Utilities — UtilsDate","text":"Either POSIXct vector Date vector Parse Dates Character Format Datetime Format chr_to_dttm standardizes datetime vector character format returns vector POSIXct format. intended use janitor::convert_to_datetime; thus muffles certain warnings duplicated function. POSIXct vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/chr_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","title":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","text":"chr_to_num() cleans strings representing numeric values. tailored use ML HCT dataset; use data may go expected.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/chr_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","text":"","code":"chr_to_num(   x,   std = TRUE,   warn = TRUE,   convert = TRUE,   na = na_patterns,   replace = data.frame(pattern = c(\"MRD BY NGS ?\", \"^NEGATIVE$\",     \"^(?:WE[EA]KLY )?POSITIVE$\", \".*\\\\bIN CR\\\\b.*\"), replacement = c(\"\", \"0\", \">0\",     \"0\")),   per_action = c(\"drop\", \"divide\", \"ignore\"),   multiple_decimals = c(\"use_first\", \"use_last\", \"ignore\"),   donor_host = c(\"use_donor\", \"use_host\", \"ignore\") )"},{"path":"https://jesse-smith.github.io/dmhct/reference/chr_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","text":"x character vector std Whether standardize vector cleaning converting convert Whether actually convert numeric na Regular expressions convert NA replace data.frame regular expressions strings replace ; regular expression column named pattern, replacements column named replacement. row passed stringr::str_replace(). per_action treat %/percent/per million/etc labels. drop simply removes labels, divide divides value appropriate denominator, ignore nothing. multiple_decimals handle multiple decimals within number donor_host value use values donor host given","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/chr_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","text":"numeric character vector, depending value convert","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/chr_to_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and Possibly Convert Numbers in character Representation — chr_to_num","text":"function first converts strings matching na_patterns missing values. simplifies numeric representations finds, including 10^x various common typos observed data (unneeded decimals, commas, zeros). Additionally, converts Excel datetimes form 1/x/1900 hh:mm back decimal representation, additionally converts fractions less 1 decimals. Lastly, handles idiosyncratic text strings, including conversion POSITIVE NEGATIVE values, well W(E|)KLY POSITIVE CR (complete remission). Optionally, extract values labelled donor host (patient), specific chimerism dataset. also removes leading text MRD NGS. default, function emits warning potential numeric values able converted numeric.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/con_sql_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to SQL Server Where Data is Stored — con_sql_server","title":"Connect to SQL Server Where Data is Stored — con_sql_server","text":"Connect SQL Server Data Stored","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/con_sql_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to SQL Server Where Data is Stored — con_sql_server","text":"","code":"con_sql_server(   server = \"SVWPBMTCTDB01\",   database = \"IRB_MLinHCT\",   trusted_connection = TRUE,   dsn = NULL,   ... )"},{"path":"https://jesse-smith.github.io/dmhct/reference/con_sql_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to SQL Server Where Data is Stored — con_sql_server","text":"server [chr(1)] Name server database [chr(1)] Name database trusted_connection [lgl(1)] Whether \"trusted connection\"; using Windows Authentication means connection. dsn [chr(1)] DSN name use connection; provided, arguments ignored. ... Additional named arguments pass odbc::dbConnect()","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/con_sql_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to SQL Server Where Data is Stored — con_sql_server","text":"[Microsoft SQL Server] ODBC connection object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/df_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Class of data.frame-Like Object — df_class","title":"Get Class of data.frame-Like Object — df_class","text":"Get Class data.frame-Like Object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/df_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Class of data.frame-Like Object — df_class","text":"","code":"df_class(data)"},{"path":"https://jesse-smith.github.io/dmhct/reference/df_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Class of data.frame-Like Object — df_class","text":"data [data.frame] data.frame one sub-classes","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/df_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Class of data.frame-Like Object — df_class","text":"[chr(1)] name class","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect All Tables in a dm Object — dm_collect","title":"Collect All Tables in a dm Object — dm_collect","text":"Collect Tables dm Object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect All Tables in a dm Object — dm_collect","text":"","code":"dm_collect(dm_remote, data_table = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect All Tables in a dm Object — dm_collect","text":"dm_remote [dm] dm object connected remote source data_table [lgl] Whether return data.table. FALSE, (default), return tibble instead.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect All Tables in a dm Object — dm_collect","text":"[dm] new dm object containing collected (local) tables","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Table with Like Information — dm_combine","title":"Combine Table with Like Information — dm_combine","text":"Combine Table Like Information","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Table with Like Information — dm_combine","text":"","code":"dm_combine(dm_std = dm_standardize(), quiet = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Table with Like Information — dm_combine","text":"dm_std standardized dm object. Standardization necessary ensure columns type. quiet update messages suppressed?","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Table with Like Information — dm_combine","text":"updated dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute All Tables in a dm Object — dm_compute","title":"Compute All Tables in a dm Object — dm_compute","text":"Compute Tables dm Object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute All Tables in a dm Object — dm_compute","text":"","code":"dm_compute(dm_remote, quiet = TRUE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute All Tables in a dm Object — dm_compute","text":"dm_remote [dm] dm object connected remote source quiet [lgl(1)] messages suppressed computation?","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute All Tables in a dm Object — dm_compute","text":"[dm] updated object tables computed","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_disconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect a dm Object from the Remote Server — dm_disconnect","title":"Disconnect a dm Object from the Remote Server — dm_disconnect","text":"Disconnect dm Object Remote Server","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_disconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect a dm Object from the Remote Server — dm_disconnect","text":"","code":"dm_disconnect(dm)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_disconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect a dm Object from the Remote Server — dm_disconnect","text":"dm [dm] dm object disconnect","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_disconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disconnect a dm Object from the Remote Server — dm_disconnect","text":"[dm] dm (invisibly)","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_elt.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract, Load, and Transform Remote Tables to Local Source — dm_elt","title":"Extract, Load, and Transform Remote Tables to Local Source — dm_elt","text":"dm_elt() encompasses entire legacy dmhct pipeline; however, pipeline deprecated longer active development. function retained backwards compatibility, strongly recommended new code use new pipeline instead.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_elt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract, Load, and Transform Remote Tables to Local Source — dm_elt","text":"","code":"dm_elt(dm_remote = dm_sql_server(), reset = FALSE, close = NULL)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_elt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract, Load, and Transform Remote Tables to Local Source — dm_elt","text":"dm_remote [dm] Remote dm object containing HCT data reset [lgl(1)] cache reset current results, even inputs changed? useful data processing logic changed, underlying data . close [lgl(1)] Whether close SQL Server connection exit. NULL closes dm_remote attribute default == TRUE leaves open otherwise.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_elt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract, Load, and Transform Remote Tables to Local Source — dm_elt","text":"[dm] dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","title":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","text":"dm_extract() extracts (optionally) loads remote database housing MLinHCT current R session. Unless .legacy = TRUE, column table names standardized extraction, operations performed. .legacy = TRUE, legacy version dm_extract() used; see details behavior. Note legacy behavior deprecated eventually removed future releases, strongly recommended new code use .legacy = FALSE.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","text":"","code":"dm_extract(   dm_remote = dm_sql_server(),   ...,   .collect = TRUE,   .legacy = FALSE,   .reset = FALSE,   .excl_dsmb = TRUE,   .quiet = FALSE,   reset = .reset )"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","text":"dm_remote [dm] dm object connected remote SQL server database ... Names tables select; provided, tables extracted .collect [lgl] Indicates whether extracted data loaded onto local machine (TRUE default) .legacy [lgl] legacy version dm_extract() used? deprecated future release, along .reset. .reset [lgl] legacy cache forced reset? applicable .legacy = TRUE; ignored otherwise. deprecated future release, along .legacy. .excl_dsmb [lgl] patients marked part active DSMB-monitored study excluded dataset? default TRUE; changed sure use case approved St. Jude DSMB. .quiet status messages suppressed? reset [lgl]  Please use .reset instead. Current behavior consider argument .reset unchanged default.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","text":"[dm] dm object tables columns extracted remote source.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Remote Tables from SQL Server for MLinHCT — dm_extract","text":"Legacy behavior opinionated current version dm_extract(). First, subset tables columns extracted. Second, HLA tables Cerner tables combined single HLA table single Cerner table. Third, column standardization occurs (though limited simple () transformations, trimws(toupper(x)) character variables, replacement implicit missing values explicit NAs.) Finally, filtering \"uninformative\" observations may occur. current pipeline, changes deferred later steps give control user.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract_legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Select and Convert Table + Columns From Remote Source — dm_extract_legacy","title":"Select and Convert Table + Columns From Remote Source — dm_extract_legacy","text":"dm_extract_legacy() previous, less extensible version dm_extract(). selects tables columns potential interest. combines Cerner tables one joins HLA tables.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract_legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select and Convert Table + Columns From Remote Source — dm_extract_legacy","text":"","code":"dm_extract_legacy(dm_remote = dm_sql_server(), collect = TRUE, reset = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract_legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select and Convert Table + Columns From Remote Source — dm_extract_legacy","text":"dm_remote [dm] dm object connected SQL Server MLinHCT collect [lgl(1)] tables collected locally output? reset [lgl(1)] cache reset current results, even inputs changed? useful data processing logic changed, underlying data .","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_extract_legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select and Convert Table + Columns From Remote Source — dm_extract_legacy","text":"[dm] updated dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_hct.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract, Standardize, and Combine Tables from the MLinHCT Database — dm_hct","title":"Extract, Standardize, and Combine Tables from the MLinHCT Database — dm_hct","text":"dm_hct() chains together dm_extract(), dm_standardize(), dm_combine() provide single wrapper function data preparation.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_hct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract, Standardize, and Combine Tables from the MLinHCT Database — dm_hct","text":"","code":"dm_hct(dm_remote = dm_sql_server(), ..., .excl_dsmb = TRUE, .quiet = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_hct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract, Standardize, and Combine Tables from the MLinHCT Database — dm_hct","text":"dm_remote [dm] dm object connected remote SQL server database ... Names tables select; provided, tables extracted .excl_dsmb [lgl] patients marked part active DSMB-monitored study excluded dataset? default TRUE; changed sure use case approved St. Jude DSMB. .quiet status messages suppressed?","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_hct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract, Standardize, and Combine Tables from the MLinHCT Database — dm_hct","text":"prepared dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_is_remote.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether a dm Object is Connected to a Remote Server — dm_is_remote","title":"Check Whether a dm Object is Connected to a Remote Server — dm_is_remote","text":"Check Whether dm Object Connected Remote Server","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_is_remote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether a dm Object is Connected to a Remote Server — dm_is_remote","text":"","code":"dm_is_remote(dm)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_is_remote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether a dm Object is Connected to a Remote Server — dm_is_remote","text":"dm dm object check","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_is_remote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether a dm Object is Connected to a Remote Server — dm_is_remote","text":"[lgl(1)] Whether dm remote ","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_pivot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Tables in Entity-Attribute-Value Format — dm_pivot","title":"Pivot Tables in Entity-Attribute-Value Format — dm_pivot","text":"Pivot Tables Entity-Attribute-Value Format","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_pivot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Tables in Entity-Attribute-Value Format — dm_pivot","text":"","code":"dm_pivot(dm_cmb = dm_combine(), quiet = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_pivot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Tables in Entity-Attribute-Value Format — dm_pivot","text":"dm_cmb dm object combined tables. necessary b/c pivoted tables created dm_combine(). quiet update messages suppressed?","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_pivot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot Tables in Entity-Attribute-Value Format — dm_pivot","text":"updated dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a dm Object by Table Name — dm_sort","title":"Sort a dm Object by Table Name — dm_sort","text":"dm_sort() converts dm list, sorts list, converts back dm. Currently, dm-specific properties (specifically primary foreign keys) lost process.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a dm Object by Table Name — dm_sort","text":"","code":"dm_sort(dm)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a dm Object by Table Name — dm_sort","text":"dm dm object sort","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a dm Object by Table Name — dm_sort","text":"sorted dm","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sql_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dm Object of HCT Data from Connection to SQL Server — dm_sql_server","title":"Create a dm Object of HCT Data from Connection to SQL Server — dm_sql_server","text":"Create dm Object HCT Data Connection SQL Server","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sql_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dm Object of HCT Data from Connection to SQL Server — dm_sql_server","text":"","code":"dm_sql_server(con = con_sql_server(), quiet = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sql_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dm Object of HCT Data from Connection to SQL Server — dm_sql_server","text":"con [Microsoft SQL Server] ODBC connection SQL Server database quiet update messages suppressed?","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_sql_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dm Object of HCT Data from Connection to SQL Server — dm_sql_server","text":"[dm] dm containing HCT data","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Column Values in a local dm for MLinHCT — dm_standardize","title":"Standardize Column Values in a local dm for MLinHCT — dm_standardize","text":"dm_standardize() takes local version SQL server input standardizes columns across tables. Standardization procedures based column type typing prefix column name. Specifically, columns standardized using following workflow: Columns type character chr/cat/lgl/mcat/intvl prefixes passed std_chr() Columns type logical lgl prefix passed std_lgl() Columns type numeric integer, num/pct prefixes, passed std_num() Columns intvl prefix passed std_intvl() Column types Date, POSIXct, POSIXlt, dt/dttm/date prefixes, passed std_date() standardization, tables sorted alphabetical order returning.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Column Values in a local dm for MLinHCT — dm_standardize","text":"","code":"dm_standardize(dm_local = dm_extract(), quiet = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Column Values in a local dm for MLinHCT — dm_standardize","text":"dm_local local dm object containing MLinHCT data dm_extract() quiet Whether suppress progress messages","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_standardize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Column Values in a local dm for MLinHCT — dm_standardize","text":"input dm standarized column values","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Tables to Analysis-Friendly Format — dm_transform","title":"Transform Tables to Analysis-Friendly Format — dm_transform","text":"previous version dmhct pipeline performed transformations tables simultaneously; ensure backwards compatibility, behavior retained dm_transform(). However, strongly recommended new code use dm_transform() instead use updated pipeline.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Tables to Analysis-Friendly Format — dm_transform","text":"","code":"dm_transform(dm_local = dm_extract_legacy(), reset = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Tables to Analysis-Friendly Format — dm_transform","text":"dm_local [dm] local dm object dm_extract() reset [lgl(1)] cache reset current results, even inputs changed? useful data processing logic changed, underlying data .","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dm_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Tables to Analysis-Friendly Format — dm_transform","text":"[dm] updated dm object","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dmhct-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dmhct: A Data Model Package for the MLinHCT Project — dmhct-package","title":"dmhct: A Data Model Package for the MLinHCT Project — dmhct-package","text":"Extracts, Loads, Transforms data SQL Server containing HCT data `dm` object cleaned tables.","code":""},{"path":[]},{"path":"https://jesse-smith.github.io/dmhct/reference/dmhct-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dmhct: A Data Model Package for the MLinHCT Project — dmhct-package","text":"Maintainer: Jesse Smith jesse.smith@stjude.org","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dt_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast a data.table to a Specified data.frame Sub-Class — dt_cast","title":"Cast a data.table to a Specified data.frame Sub-Class — dt_cast","text":"Cast data.table Specified data.frame Sub-Class","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dt_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast a data.table to a Specified data.frame Sub-Class — dt_cast","text":"","code":"dt_cast(data, to)"},{"path":"https://jesse-smith.github.io/dmhct/reference/dt_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast a data.table to a Specified data.frame Sub-Class — dt_cast","text":"data [data.table] data.table cast; modified -place possible. [chr(1)] subclass return","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/dt_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast a data.table to a Specified data.frame Sub-Class — dt_cast","text":"converted data","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/intvl_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Standardized Intervals to Matrix Format — intvl_to_matrix","title":"Convert Standardized Intervals to Matrix Format — intvl_to_matrix","text":"intvl_to_matrix() converts interval representation standardized std_invl() 4-column numeric matrix. Columns represent open closed bounds location bounds.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/intvl_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Standardized Intervals to Matrix Format — intvl_to_matrix","text":"","code":"intvl_to_matrix(x)"},{"path":"https://jesse-smith.github.io/dmhct/reference/intvl_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Standardized Intervals to Matrix Format — intvl_to_matrix","text":"x character vector standardized intervals","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/intvl_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Standardized Intervals to Matrix Format — intvl_to_matrix","text":"4-column numeric matrix: left_closed:  Whether left bound closed open left_bound:   left bound interval right_bound:  right bound interval right_closed: Whether right bound closed open","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/na_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Common Patterns Representing Missing Data — na_patterns","title":"Common Patterns Representing Missing Data — na_patterns","text":"na_patterns collection regular expression commonly represent missing data, especially character vector converted something else. designed match strings already standardized.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/na_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common Patterns Representing Missing Data — na_patterns","text":"","code":"na_patterns"},{"path":"https://jesse-smith.github.io/dmhct/reference/na_patterns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common Patterns Representing Missing Data — na_patterns","text":"object class character length 8.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/non_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Values That Cannot Be Converted to numeric — non_numeric","title":"Extract Values That Cannot Be Converted to numeric — non_numeric","text":"non_numeric() designed primarily interactive checking numeric conversions. helps quickly determine values vector converted numeric (either directly via std_num()); particularly useful checking steps data cleaning pipeline.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/non_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Values That Cannot Be Converted to numeric — non_numeric","text":"","code":"non_numeric(x, unique = TRUE, sort = unique, std_num = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/non_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Values That Cannot Be Converted to numeric — non_numeric","text":"x vector unique Whether unique values returned; FALSE, values returned sort Whether return values sorted; useful unique = TRUE std_num Whether use std_num() numeric conversion; FALSE, conversion performed directly .numeric() (warnings suppressed)","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/non_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Values That Cannot Be Converted to numeric — non_numeric","text":"values x resulted NA_real_ conversion; includes NA values x conversion","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/path_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Path from Components — path_create","title":"Create a Path from Components — path_create","text":"Create Path Components","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/path_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Path from Components — path_create","text":"","code":"path_create(..., abs = FALSE)"},{"path":"https://jesse-smith.github.io/dmhct/reference/path_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Path from Components — path_create","text":"... [chr] Components path","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/path_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Path from Components — path_create","text":"[fs_path] created cleaned file path","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jesse-smith.github.io/dmhct/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/select_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Column Names Using Tidyselect Specifications — select_colnames","title":"Select Column Names Using Tidyselect Specifications — select_colnames","text":"select_colnames() selects names columns specified .... useful standardizing function's interface providing link underlying functions may take variety column specifications.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/select_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Column Names Using Tidyselect Specifications — select_colnames","text":"","code":"select_colnames(data, ...)"},{"path":"https://jesse-smith.github.io/dmhct/reference/select_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Column Names Using Tidyselect Specifications — select_colnames","text":"... <tidy-select> One tidyselect specifications desired column names (including simply using column names) .data data frame data frame extension (e.g. tibble)","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/select_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Column Names Using Tidyselect Specifications — select_colnames","text":"character vector column names","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize character Vectors — std_chr","title":"Standardize character Vectors — std_chr","text":"std_chr() standardizes character vectors ASCII text unnecessary whitespace given case. default, retain newlines inside text, though condense consecutive newlines carriage returns single newline.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize character Vectors — std_chr","text":"","code":"std_chr(   x,   case = c(\"upper\", \"lower\", \"title\", \"sentence\"),   keep_inner_newlines = TRUE,   na = \"^$\" )"},{"path":"https://jesse-smith.github.io/dmhct/reference/std_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize character Vectors — std_chr","text":"x character vector case case convert . NULL skip case conversion. keep_inner_newlines Whether retain line breaks inside text. FALSE treat newlines carriage returns identically whitespace. na Regex patterns consider NA. Passed stringr::str_detect(). Can vector patterns.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize character Vectors — std_chr","text":"standardized character vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Dates to Standard Format — std_date","title":"Parse Dates to Standard Format — std_date","text":"std_date standardizes date vector returns vector Date POSIXct format, depending whether sub-daily information available data.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Dates to Standard Format — std_date","text":"","code":"std_date(   x,   force = c(\"none\", \"dt\", \"dttm\"),   orders = c(\"mdy\", \"dmy\", \"ymd\", \"mdyr\", \"dmyr\", \"ymdr\", \"mdyR\", \"dmyR\", \"ymdR\", \"mdyT\",     \"dmyT\", \"ymdT\", \"mdyTz\", \"dmyTz\", \"ymdTz\", \"Tmdyz\", \"Tdmyz\", \"Tymdz\", \"mdyRz\",     \"dmyRz\", \"ymdRz\", \"mdyrz\", \"dmyrz\", \"ymdrz\", \"Tmdy\", \"Tdmy\", \"Tymd\", \"Tmdyz\",     \"Tdmyz\", \"Tymdz\"),   tz_heuristic = c(5L, 6L),   warn = TRUE,   train = TRUE,   na = na_patterns,   range_value = c(\"start\", \"end\", \"na\"),   range_sep = c(\"-\", \"to\", \",\"),   ... )"},{"path":"https://jesse-smith.github.io/dmhct/reference/std_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Dates to Standard Format — std_date","text":"x vector character dates, Dates, POSIXts force Whether force conversion Date (force = \"dt\") POSIXct (force = \"dttm\"). default forcing (force = \"none\"). orders character vector date-time formats. order string series formatting characters listed base::strptime() might include \"%\" prefix. example, \"ymd\" match possible dates year, month, day order. Formatting orders might include arbitrary separators. discarded. See details lubridate::parse_date_time() implemented formats. multiple order strings supplied, order applied formats determined select_formats parameter lubridate::parse_date_time() (passed via dots). tz_heuristic Hours consider determining presence sub-daily information. exact hours (.e. 5:00:00) combined. default corresponds accidental encoding CST-UTC offset hours. warn warnings thrown necessary? FALSE suppress warnings conversion process. train logical, default TRUE. Whether train formats subset input vector. result supplied orders sorted according performance training set, commonly results increased performance. Please note even train = FALSE (exact = FALSE, passed via dots) guessing actual formats still performed pseudo-random subset original input vector. might result ⁠formats failed parse⁠ error.See notes lubridate::parse_date_time(). na Regular expressions convert NA range_value value use date given range; can start date, end date, fill NA range_sep Separators used date ranges ... Additional arguments pass convert_to_datetime(). , turn, passed methods, including excel_numeric_to_date(), parse_date_time(), .POSIXct().","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Dates to Standard Format — std_date","text":"Date POSIXct vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_intvl.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Interval Representations — std_intvl","title":"Standardize Interval Representations — std_intvl","text":"std_invl() standardizes various representations numeric intervals found ML HCT dataset. intervals assumed percentage values thus lie 0 100. Explicit intervals upper lower bounds, well implicit intervals using < >, handled (<= >= currently supported). return value simplifies <\/>/<=/>= single numeric value possible uses standard interval notation .","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_intvl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Interval Representations — std_intvl","text":"","code":"std_intvl(   x,   less_than = c(\"LESS THAN\",     \"[A-Z ]*NOTHING TO SUGGEST[A-Z ]*SENSITIVITY[A-Z ]*(?=[0-9])\"),   greater_than = c(\"GREATER THAN\"),   na = na_patterns,   std_chr = TRUE,   warn = TRUE,   ... )"},{"path":"https://jesse-smith.github.io/dmhct/reference/std_intvl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Interval Representations — std_intvl","text":"x character vector less_than Regex patterns consider \"<\". Passed stringr::str_replace(). Can vector patterns. greater_than Regex patterns consider \">\". Passed stringr::str_replace(). Can vector patterns. na Regex patterns consider NA. Passed stringr::str_detect(). Can vector patterns. std_chr Whether standarize strings parsing warn Whether emit warning potential numeric values able converted interval ... Arguments passed chr_to_num std Whether standardize vector cleaning converting convert Whether actually convert numeric replace data.frame regular expressions strings replace ; regular expression column named pattern, replacements column named replacement. row passed stringr::str_replace(). per_action treat %/percent/per million/etc labels. drop simply removes labels, divide divides value appropriate denominator, ignore nothing. multiple_decimals handle multiple decimals within number donor_host value use values donor host given","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_intvl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Interval Representations — std_intvl","text":"character vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize logical Representations in Various Formats — std_lgl","title":"Standardize logical Representations in Various Formats — std_lgl","text":"std_lgl() converts classes logical vectors. character use .logical(); character vectors converted first (optionally) standardizing std_chr assigning logical value based regular expression true, false, na.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize logical Representations in Various Formats — std_lgl","text":"","code":"std_lgl(   x,   true = c(\"^TRUE$\", \"^1$\", \"^YES\", \"^POS\", \"^ALIVE\", \"^ON THERAPY\"),   false = c(\"^FALSE$\", \"^0$\", \"^NO\", \"^NEG\", \"^EXPIRED\", \"^DECEASED\", \"^OFF THERAPY\"),   na = na_patterns,   std_chr = TRUE,   warn = TRUE )"},{"path":"https://jesse-smith.github.io/dmhct/reference/std_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize logical Representations in Various Formats — std_lgl","text":"x vector convert true Regex patterns consider TRUE. Passed stringr::str_detect(). Can vector patterns. false Regex patterns consider FALSE. Passed stringr::str_detect(). Can vector patterns. na Regex patterns consider NA. Passed stringr::str_detect(). Can vector patterns. std_chr Whether standardized character vector parsing warn Whether warn character strings converted logical","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize logical Representations in Various Formats — std_lgl","text":"logical vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and Standardize Numeric Values in Various Forms — std_num","title":"Convert and Standardize Numeric Values in Various Forms — std_num","text":"std_num() converts base classes, well int64, factor, Date, POSIXt vectors simplest numeric form possible.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and Standardize Numeric Values in Various Forms — std_num","text":"","code":"std_num(x, na = na_patterns, std_chr = TRUE, warn = TRUE, ...)"},{"path":"https://jesse-smith.github.io/dmhct/reference/std_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and Standardize Numeric Values in Various Forms — std_num","text":"x vector convert numeric na Regex patterns consider NA. Passed stringr::str_detect(). Can vector patterns. std_chr Whether standardize character factor conversion warn Whether warn strings converted; passed chr_to_num() ... Arguments passed chr_to_num std Whether standardize vector cleaning converting convert Whether actually convert numeric replace data.frame regular expressions strings replace ; regular expression column named pattern, replacements column named replacement. row passed stringr::str_replace(). per_action treat %/percent/per million/etc labels. drop simply removes labels, divide divides value appropriate denominator, ignore nothing. multiple_decimals handle multiple decimals within number donor_host value use values donor host given","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert and Standardize Numeric Values in Various Forms — std_num","text":"numeric vector","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/std_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert and Standardize Numeric Values in Various Forms — std_num","text":"character vectors standardized using std_chr() default, converted. factors treated character vectors, rather using underlying integer representation. double int64 vectors converted integer cause overflow loss precision. Date converted integer, POSIXt converted integer range allows, otherwise double.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/str_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Detected Patterns with NA — str_to_na","title":"Replace Detected Patterns with NA — str_to_na","text":"str_to_na() detects patterns x using stringr::str_detect() replaces indices pattern found NA_character_. vectorized x pattern; pattern looped multiple provided.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/str_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Detected Patterns with NA — str_to_na","text":"","code":"str_to_na(string, pattern = stringr::fixed(\"\"))"},{"path":"https://jesse-smith.github.io/dmhct/reference/str_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Detected Patterns with NA — str_to_na","text":"string Input vector. Either character vector, something coercible one. pattern Pattern look . default interpretation regular expression, described stringi::about_search_regex. Control options regex(). perform multiple replacements element string, pass supply named vector (c(pattern1 = replacement1)). Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale.","code":""},{"path":"https://jesse-smith.github.io/dmhct/reference/str_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Detected Patterns with NA — str_to_na","text":"input character vector patterns replaced NA","code":""}]
